library(shiny)
library(bslib)
library(highcharter)
detach("package:highcharter", unload = TRUE)
library(ggplot2)
install.packages('plotly')
library(thematic)
library(lubridate)
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
AEP <- read.csv('Base3.csv')
View(AEP)
AEP$Q3...No
table(AEP$Q5...En)
taally(AEP$Q5...En)
tally(AEP$Q5...En)
count(AEP$Q5...En)
lenght(AEP$Q5...En)
length(AEP$Q5...En)
length(is.na(AEP$Q5...En))
length(is.na(AEP$Q5...En)==TRUE)
count(AEP$Q5...En,NA)
count(AEP$Q5...En,1)
table(AEP$Q5...En)[1]
table(AEP$Q5...En)[1:2]
sum(table(AEP$Q5...En)[1:2])
sum(is.na(AEP$Q5...En))
length(AEP)
length(AEP$Q5...En)
install.packages('bsicons')
library(bsicons)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Q1_low_total <-sum(table(AEP$Q5...En)[1:2])/length(AEP$Q5...En)
Q1_low_total <-sum(table(AEP$Q5...En)[1:2])
output$Q1.1_Perc <- renderPrint({Q1_low_total/lenght(AEP$Q5...En*100})
runApp()
runApp()
runApp()
output$Q1Perc <- renderPrint({Q1_low_total/lenght(AEP$Q5...En*100)})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI for application that draws a histogram
page_navbar(
Q1 <- textOutput('Q1Perc')
nav_panel(
runApp()
runApp()
